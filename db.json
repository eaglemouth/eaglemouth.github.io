{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/images/output77.png","path":"images/output77.png","modified":0,"renderable":0},{"_id":"source/images/sheep.jpg","path":"images/sheep.jpg","modified":0,"renderable":0},{"_id":"source/images/胡说八道.png","path":"images/胡说八道.png","modified":0,"renderable":0},{"_id":"source/images/调试.png","path":"images/调试.png","modified":0,"renderable":0},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_data/link.yml","hash":"3c9182c098ad951a57220e41ec8770bdcd6c4899","modified":1685023702255},{"_id":"source/_posts/test.md","hash":"6234fe09ae627ea1dd4863af2120514bb390740e","modified":1685021471599},{"_id":"source/categories/index.md","hash":"3f1e8bf6270716b43b8f9dd10adb5b690ed711c1","modified":1679498555420},{"_id":"source/images/output77.png","hash":"e0c9d43942854ccf4679cce904e3fa86beab7652","modified":1679844421951},{"_id":"source/images/sheep.jpg","hash":"ada947bf0ec134b09c55db753b9dd842411ae7ff","modified":1685066588153},{"_id":"source/_posts/hello-world.md","hash":"826e18ef8dc27b14ff917a1c55a3b180fb4db0c5","modified":1681572340244},{"_id":"source/images/调试.png","hash":"633b89f3a0abec634ebea8dfd4cd5a0c2495e6ba","modified":1679844762223},{"_id":"source/_posts/汇编语言1.md","hash":"ecc6e634b99f10d70fca9cc620f45a1aca6b7ea6","modified":1685024556660},{"_id":"source/tags/index.md","hash":"845bba040bcaa45ec5203589977a5623927cd021","modified":1679498510865},{"_id":"source/_posts/排序算法.md","hash":"f4cd857627d1247fccb447447f9889092e0f5665","modified":1686892401186},{"_id":"source/link/index.md","hash":"995f51e849086ccbd0002742696ffc0e3a080a22","modified":1685022131949},{"_id":"source/images/胡说八道.png","hash":"5c1abef8048329aa959f530700f2530fcf762496","modified":1679844274361},{"_id":"themes/butterfly/README.md","hash":"15e7f6386b4fd3fa4a6c179ddf641e1ae57eafa2","modified":1679493425664},{"_id":"themes/butterfly/LICENSE","hash":"c8bc7df08db9dd3b39c2c2259a163a36cf2f6808","modified":1679493425664},{"_id":"themes/butterfly/README_CN.md","hash":"d0f7a24732855ae340f94e8286085d5387850cde","modified":1679493425664},{"_id":"themes/butterfly/_config.yml","hash":"7549b155880905b348c027a54e7071fc8445042a","modified":1679493425665},{"_id":"themes/butterfly/languages/default.yml","hash":"a62bfe75c32dd0c2754b6fc70df027947ed1e711","modified":1679493425665},{"_id":"themes/butterfly/package.json","hash":"861ab8b6d38e2ffb37f224342f1123d5f37b87e0","modified":1679493425697},{"_id":"themes/butterfly/plugins.yml","hash":"589f1446c5ef64f77bd7bfb466743a8ddb59d2c9","modified":1679493425697},{"_id":"themes/butterfly/languages/en.yml","hash":"9d83a52e3fe3c086eadcdd9bca50829ca9b3a188","modified":1679493425665},{"_id":"themes/butterfly/layout/category.pug","hash":"bf979aec88d78b644fc5d31518f8679ad7625792","modified":1679493425666},{"_id":"themes/butterfly/layout/archive.pug","hash":"115fa5ee8864e5c97549eff91a17c66101d724ab","modified":1679493425666},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"30b69c969394392e4bdd3763873ceed0d473cfcb","modified":1679493425666},{"_id":"themes/butterfly/layout/index.pug","hash":"648dcbdb3d145a710de81c909e000e8664d2ac9c","modified":1679493425696},{"_id":"themes/butterfly/layout/page.pug","hash":"bf2d6c6d2d156777b55292e51be02b0b3acf0af8","modified":1679493425696},{"_id":"themes/butterfly/layout/tag.pug","hash":"4bb5efc6dabdf1626685bf6771aaa1467155ae86","modified":1679493425696},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"c2f1111d0cffddbf04248a7daa55c7895b9e4cf3","modified":1679493425666},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"e320b40c051bae1549156cd5ea4a51383cf78598","modified":1679493425663},{"_id":"themes/butterfly/layout/post.pug","hash":"fdbb508b5e6dec30fb8753c5a7fdd494410c4fc0","modified":1679493425696},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"aace9ddff469de4226e47a52ede1c81e66d66d5c","modified":1679493425667},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"6e0f9470b18bd37d4891282ac73d61676b040e8c","modified":1679493425663},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"d9ff4bad9c9664e12729c7a531169a05698a3fd1","modified":1679493425662},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"92683cb785a29e5a73701b33dba73d3afac268c3","modified":1679493425661},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"28b425b486c009e043169c1532a2b62150613c2c","modified":1679493425667},{"_id":"themes/butterfly/.github/workflows/stale.yml","hash":"4040c76547e270aaf184e9b219a44ca41bbb1b9f","modified":1679493425663},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"8715948b93e7508b84d913be1969b28c6b067b9b","modified":1679493425667},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"ab32b8d4ef682bd1d9b727b9d25a19dc06f3e68e","modified":1679493425667},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"ab3ff72ecaa7da09fcb7d03a8b341a061e870826","modified":1679493425672},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"c5c58714fb3cb839653e5c32e6094784c8662935","modified":1679493425675},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"5f96a28a4eac046b68ccc10e8c24ab01525e3245","modified":1679493425676},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"4f41fc46410e1e3018ff87e1d1a5c28be7258119","modified":1679493425676},{"_id":"themes/butterfly/scripts/events/404.js","hash":"f1d1c378356b776e9b2a8411e6dca88dc8c3245c","modified":1679493425698},{"_id":"themes/butterfly/scripts/events/init.js","hash":"72605a00bf623b6cbc9fa0f90069ea2ae584c5c0","modified":1679493425698},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"39a2f0088841abb89b3b801469266cc9568fced0","modified":1679493425698},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"95479790234c291b064d031577d71214cdd1d820","modified":1679493425698},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"218add7e9b39b6fb6e69921abb9e44891a6cc3ce","modified":1679493425699},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"f59e10305fef59ea3e62a7395106c0927582879d","modified":1679493425699},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"d33f0a055bacaa96ee5b69f821292d87658f4b0c","modified":1679493425700},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"5fd6c9659262dc8f61d87866d0417fd534292c88","modified":1679493425700},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"4f712b4ea383b59a3122683db1d54c04a79ccc5d","modified":1679493425700},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"376e1884ea764404c38b1e73b16de0358ece519e","modified":1679493425701},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"44cca49ddc76921bb455465ef912cab46c993cef","modified":1679493425703},{"_id":"themes/butterfly/scripts/helpers/findArchiveLength.js","hash":"8ff03b35385f9162e1eb54dceb5fa7f781306caf","modified":1679493425701},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"76343ac8422c9c8539082e77eda6ffee4b877eb2","modified":1679493425702},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"688b424e4fae8db268033dd1f78b999932b22e57","modified":1679493425702},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"3609660803ee8ff6b662d9326b34cd1ab65ae4d7","modified":1679493425702},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"3ba7677969ff01fab06fc6713455ddc6861f0024","modified":1679493425703},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"3267d4a7fe849b8e1b4d338670cefc502721e247","modified":1679493425703},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"e01a3967e5884881bab858b11635457df412de80","modified":1679493425703},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"fd683ccc090db3122d77c7ee73e8d35dc8735ee3","modified":1679493425704},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"7641adb0d520c5ff29dd36fc1fb8617c52ecc9fb","modified":1679493425704},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"551f1b8edc973bd8afc5cce2eae546f002fa84c3","modified":1679493425704},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"08ea00791bd4738952234cb5d8360e119df6f875","modified":1679493425705},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"56a5d41487d74654b75305c5325167a116495900","modified":1679493425705},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"4c7056d3cd56f10bd209d2ba4d3cc2027aad1440","modified":1679493425705},{"_id":"themes/butterfly/source/js/main.js","hash":"ab1eb2ae2fc7937aa0579d5293432fa986bf49b2","modified":1679493425711},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1679493425711},{"_id":"themes/butterfly/source/css/index.styl","hash":"c7924868adcb046b46498626a9223c7a7b3f2e30","modified":1679493425711},{"_id":"themes/butterfly/source/css/var.styl","hash":"e1e37a2e932163886789b72624c7348545003f1d","modified":1679493425711},{"_id":"themes/butterfly/source/js/utils.js","hash":"002c21bdbf1c3f4e02d86ff6927d47fd18c09730","modified":1679493425711},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"c8dbdfe6145a0bc6f7691c9551be8169a2698f0a","modified":1679493425668},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"c4dac81869b33fa1590fae60a45b2e915a59c3ec","modified":1679493425711},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1679493425711},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1679493425711},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"f4b80b4a3ff5dd877b447b42d078f01ee3ecab24","modified":1679493425668},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"c7666a10448edd93f5ace37296051b7670495f1b","modified":1679493425668},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"bd5dd5452e28a4fe94c3241a758ec6f4fdb7a149","modified":1679493425669},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"fd55f0e09827ef40c53c48d184a553464aac3e03","modified":1679493425669},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"f29123e603cbbcc6ce277d4e8f600ba67498077c","modified":1679493425669},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"72efaa09ff60843567458bd54152e06f0cb2757e","modified":1679493425669},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"6dc2c9b85df9ab4f5b554305339fd80a90a6cf43","modified":1679493425670},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"5168caadc4cf541f5d6676a9c5e8ae47a948f9ad","modified":1679493425670},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"e9f952f1b66a0116fccb812b14db0f229666e586","modified":1679493425670},{"_id":"themes/butterfly/layout/includes/loading/fullpage-loading.pug","hash":"767ca9b4dad126ba5fbd2f3ea5ca8d07c0d2b32c","modified":1679493425672},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"962ee70a35e60a13c31eea47d16b9f98069fe417","modified":1679493425671},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"50b4b9c7f6a4771910be4198639cfcfc6d7b8925","modified":1679493425671},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"ca8bcd90ad9467819330bfe7c02b76322754bccf","modified":1679493425671},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1679493425674},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"631ec7000fd4d6cfa2de118ee02ad8a42ffb34f5","modified":1679493425672},{"_id":"themes/butterfly/layout/includes/loading/index.pug","hash":"00ae419f527d8225a2dc03d4f977cec737248423","modified":1679493425673},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"9155f01d4c644a2e19b2b13b2d3c6d5e34dd0abf","modified":1679493425673},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"39c205027296dbd9fc9eb3cfd9d033bc5bd031b7","modified":1679493425673},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"e9459f122af7b733398578f9f0f8ab3c5e12a217","modified":1679493425674},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"cc1f7ae8a7ce5445277215821092e712ec8cc296","modified":1679493425675},{"_id":"themes/butterfly/layout/includes/loading/pace.pug","hash":"39847b8a1f0fad7889954a4ac936b7681949f16c","modified":1679493425673},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"594626a18b7efbf771232855dfbce143fb244bc6","modified":1679493425675},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"a60d9cc9083142e3d92b618561abd557fcab502b","modified":1679493425674},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"12be059c536490af216a397e8f2a7abbf6d4610e","modified":1679493425675},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"e939344fd389aeb11864ee697d5fd9b036d8325f","modified":1679493425676},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"4e37535c63149708ecbedb262336014524ad8723","modified":1679493425684},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"558456d85100606c14e0a59801b0ee2ee67aadd9","modified":1679493425689},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"f0898509da70388b5c532f19e762756d74080200","modified":1679493425689},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"08979afbfecb4476a5ae8e360947b92624d285b8","modified":1679493425689},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"d4836a2ce1c87a59cfa8e4986346bf353710277f","modified":1679493425692},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"a8312b527493dabbadbb1280760168d3bc909a3b","modified":1679493425692},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"21e019bdc3b1e796bb00976bb29af2d51f873624","modified":1679493425692},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"73d33b6930e7944187a4b3403daf25d27077a2dd","modified":1679493425692},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"1dba77d250eeebfb6e293d504352c7e9ea31980b","modified":1679493425693},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"66e383b4ef374951eb87dd1bf4cdb7a667193fb5","modified":1679493425693},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"08641633d38903351a7424baf9893d9038ba057d","modified":1679493425693},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"59d979702fa21d960443824198614d63aaf69662","modified":1679493425694},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"c02b1779bd0ebca6749f195be096b6ca574bfa29","modified":1679493425693},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"8a8aa922be1824df17f30ba08ee6b55e2af05787","modified":1679493425694},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"bb842d2aa6469d65bf06af1372f0a19a9e4ef44c","modified":1679493425694},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"7b5ae404a1205546b7de4be42291315cf918f2b3","modified":1679493425695},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"12185713f9ca08984fc74e3b69d8cd6828d23da8","modified":1679493425695},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"ba94ceb40d7c81372a76103d958dcc2cc6a84f00","modified":1679493425695},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"6a7a926b72c5083aa14051a0eca8d49e1c6261f1","modified":1679493425706},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"e6107800576bf465dad87494758f6694f0bd27d4","modified":1679493425710},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"792a04d36de32f230ca3256ad87a90fe8392f333","modified":1679493425710},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"fde51780f525b002885c9f189cccc459542f5dc6","modified":1679493425706},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"0abe05309a186682772a94e5e759b63f8028e61a","modified":1679493425710},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"077ce6932261cf51696834a25d1d988fec6cd7d0","modified":1679493425711},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"d33f2d9001a82d9a72d6f4088743762fbd016e4c","modified":1679493425711},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"f0b01bbf321c2c24fdccaee367dd9fd448031a72","modified":1679493425711},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"bd099f7d3adef4b7edd24c0a25a07415b156e587","modified":1679493425711},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"b0ba6f72848bc711bcf534c56b04ae14ab21b320","modified":1679493425711},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"a2aa5caf338ff5323b6ff0601ebcc09e710d8398","modified":1679493425707},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"824b2b2d2ee72583b9e009c0bb13e29e806534cc","modified":1679493425711},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"6dcf19c0933c8828a439f801b0f4b256447dec07","modified":1679493425711},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"3c178608406c31d768af355ef1d7326da37cc75f","modified":1679493425709},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"b5ba2c3339ad406ce611d12d3f8cc84f864fbc03","modified":1679493425711},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"956ed11cc5d65941b49192b9be47cecfaed57a91","modified":1679493425711},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"ecc2b2e28c179eb9406fc2c6f00e141078249cdd","modified":1679493425711},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"68bc8cbea25dbb3cdc170f09f9b43ce130547717","modified":1679493425711},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"a7223a8fcc4fa7b81e552c9a2554be7df9de312e","modified":1679493425711},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"a714776e3d585369f2285b6bb4e1564539c58d8b","modified":1679493425711},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"d83389e07f8851f1b9afafe0eacd1bf10ad334ef","modified":1679493425711},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"7e9b65dcae7ac54e0183bc841fea0f4bd4d78e5c","modified":1679493425711},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"9e35f91847773b915c74a78b8aa66c7bdb950ad0","modified":1679493425711},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"d072872714854cdc3d2975fb131ac31cb82b13e3","modified":1679493425711},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"01ba993e7bd384827c0f5499ae0c5f82e068d844","modified":1679493425711},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"5dd1ba997741d02894ff846eda939ad8051c0bb2","modified":1679493425711},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"85f5f2c9150061bae8a5188c10f23a63e7e01a4f","modified":1679493425711},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"8549829fb7d3c21cd9e119884962e8c463a4a267","modified":1679493425711},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"7c463ba25b3b54f0f46dfd75971d792816e942a8","modified":1679493425711},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"f7d3d598a27467d24b0b37f49c012b5759394c0a","modified":1679493425711},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"cced94e70b4b90130cfa215582be2adbf883efba","modified":1679493425711},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"62da1de0d5b8453fcecbfacddb16985265638ba5","modified":1679493425711},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"b7cf7753479fcf2fe07287ffdb0e568adbba4c18","modified":1679493425711},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"985b183db7b7bfd8f9bdb60494549fb7f850348b","modified":1679493425711},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"5a873d01fabebcf7ddf7a6b1c2e2e5e2714097f4","modified":1679493425711},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"2f83bd145b870d80d4b18b0ac603235229a5694e","modified":1679493425711},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"ec81ea316c82b83d6aee31e52f248d329559d5d3","modified":1679493425711},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"331c89ecfb79fab68466944a43e9e3d0ff49c646","modified":1679493425711},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"73027a5e8b49d62b5b5a4d51663d5189f8eb7b4c","modified":1679493425711},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"07ea7134db7a66c87658116f089fb1a2a6906563","modified":1679493425711},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"1ada177b1635bd7d1b6f02b33f7a81823d8bce0c","modified":1679493425711},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"f4d21dcbc3b00eed9b1f604e132c4c6811a0a059","modified":1679493425677},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"aff5c34b6061b281c66a986cf017e9021dc11ac6","modified":1679493425677},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"846cabae287ae31b3bbfac3da022475713dd5ecc","modified":1679493425677},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"38b85d216d9377ddbaa2e5867e2f03805227237c","modified":1679493425678},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"cd4fc9c5a61608a5dedf645c1295430a1623040f","modified":1679493425678},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"716dc463fe4ef5112e7018ed60804125fdfa5cad","modified":1679493425677},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"645087801624a73cbee63269cfd399e9da39c663","modified":1679493425677},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"3f59333064c4fc754c638f13a417b7be2569ca09","modified":1679493425678},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"b741b5e942481d779a8a1fe94c45154a62a6b748","modified":1679493425679},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"e5af55cdb87d1ffd3d8702bc77097159acf95b54","modified":1679493425679},{"_id":"themes/butterfly/layout/includes/third-party/chat/gitter.pug","hash":"794ce3911f17d354b7196deb8c36d191afac63fb","modified":1679493425679},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"f3f6eaecbcf9352342e259f4a5a3ad7160f31fc9","modified":1679493425679},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"a5ddcf84ce8855c7801289270009e29c3a103150","modified":1679493425680},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"d6a2a828689d619943838d42f2c3a45551e2c6c4","modified":1679493425681},{"_id":"themes/butterfly/layout/includes/third-party/chat/messenger.pug","hash":"e703319ae5395273e81de11ba2366f21a104cf47","modified":1679493425680},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"cd7ab4a776be93eea96a6f6fd0a547977fbe1ea3","modified":1679493425680},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"3b551ab7618b36795480015b5cf565288df5b957","modified":1679493425681},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"fe599836225b835bd19fe1a6831fb4d41bcec071","modified":1679493425681},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"ca1337586aafc85e7f6d730ed0a1984a1a12aba7","modified":1679493425681},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"77729ecfae68ad21ff1d22ff2c8aa212f4d405c6","modified":1679493425682},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"319463fc8ff993b798f2293b659b522ad7770cf0","modified":1679493425682},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"5b44b4e5f2445260811de81edd3eeeb97d8bb583","modified":1679493425682},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"589f8503f264d4fda971c8daf2028f45c4f2867b","modified":1679493425683},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"3abbaaa4ea575c45b3cebffd40bad1acc6ffce84","modified":1679493425682},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"f04263a3bd7efb7f1b250cfee112e82f49805492","modified":1679493425683},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"ccb5c3f2a821b87986998595743387d7c997c16e","modified":1679493425683},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"d48d59ebf8c0142fb3c4592a0d35874f85e6fd4c","modified":1679493425683},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"2afa4c21dd19890f47fb568cfb0d90efb676a253","modified":1679493425685},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"bf6b1453096dd7f53d81cde078c233d301e14304","modified":1679493425684},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"cba55cbbd0962bf84b8956195e686b0e158ed247","modified":1679493425684},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"fad70676346f194f166ac4e714ac6ff37cbf50ea","modified":1679493425685},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"f0d3eddd2bed68e5517274b3530bfe0fa5057d8e","modified":1679493425685},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"297d34d83e7bff8ec3b8bc19bb0f4d901c35fe5a","modified":1679493425685},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"75ebfe533dd7ee59113b84c2972694cadd92c6a9","modified":1679493425686},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"cd1ce86441dc508e4c3dbf8b829046455ba8a6b4","modified":1679493425686},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"b2ede1f6b41026ebd233ac076a405889a6eec76b","modified":1679493425687},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"f8b65460c399973090c1fb7ab81e3708c252e7cc","modified":1679493425687},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"bc207dcb771fc2c2c329f29d01708ff6b18443da","modified":1679493425687},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"6c90af5e9b4d7f8147f4484f27e1b41e29d5a629","modified":1679493425690},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"33368c0b80e4c4e78f3c7ee9bec0fed70ad838ca","modified":1679493425688},{"_id":"themes/butterfly/layout/includes/third-party/search/docsearch.pug","hash":"ba04174d977da988a1d49c06641262c413352346","modified":1679493425690},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"91a72e94743befa21a7b1c557fbb3751efb87ab0","modified":1679493425687},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"3adcf28a8d205ea3ee19828eda0e668702fac07a","modified":1679493425690},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"f434dce30f8faee0db5a8e4d2c81196b0e3605f4","modified":1679493425688},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"0785346c1d8c49a10f02481b701138ed5898f4ac","modified":1679493425690},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"1f02a26730e5f36cc2dfec7ff4d5c93a099ed5ba","modified":1679493425691},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"6e77f1ca0cfb0db6b028f5c0238780e66d344f3d","modified":1679493425707},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"8b4034e53ca5bf85097f681a6e76a53ce685c205","modified":1679493425691},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"fc702a4614d0562a381907b083f71ba63d301d86","modified":1679493425708},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"01ff9e77eb1bd454bec65a6ff5972c8e219bc708","modified":1679493425709},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"1309292f1c8c53d96cd7333507b106bcc24ca8fc","modified":1679493425708},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4898a09d8e67fb358ffd74b3a1f0014f555dd856","modified":1679493425691},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"8106bd031586f075a994956ee4438eb13be25d7b","modified":1679493425691},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"0b8aea62d1550113e1fcc237fae1b03743190208","modified":1679493425709},{"_id":"public/sitemap.xml","hash":"2e210d4ab195ce9667e4fa066e62f0b01b7aafa2","modified":1686892414338},{"_id":"public/atom.xml","hash":"35d0cce2e6c264161585725180d1670e220a39e6","modified":1686892414338},{"_id":"public/sitemap.txt","hash":"b0b508e785cebc866efd03c09d6d07464fdb7a20","modified":1686892414338},{"_id":"public/search.xml","hash":"34129b7a7b37e841d786a73fb07b341e924ed35f","modified":1686892414338},{"_id":"public/link/index.html","hash":"312ee49d687cbc4faff57d85fd36e6d2b53403fa","modified":1686892414338},{"_id":"public/categories/index.html","hash":"4a1298fe6e34ca082893487a9c5dfa74f11100d5","modified":1686892414338},{"_id":"public/tags/index.html","hash":"55f38acf155e6f6b1e17082c14fe7da6418e99eb","modified":1686892414338},{"_id":"public/posts/1.html","hash":"d70ac319ab609cf68ea8c9e0837ded90fa1918af","modified":1686892414338},{"_id":"public/posts/0.html","hash":"6f585fc2f043745a95620563f89b49349a74d8a5","modified":1686892414338},{"_id":"public/posts/d87f7e0c.html","hash":"fb750eea6ac04bf458616ee2d0b88ac1ea43abef","modified":1686892414338},{"_id":"public/posts/4a17b156.html","hash":"3e271f5c4b235c3315101e962ee2b1f443ba6c76","modified":1686892414338},{"_id":"public/categories/学习笔记/index.html","hash":"277a2d08f2e109ec30e783882a548e0ae714b53c","modified":1686892414338},{"_id":"public/archives/index.html","hash":"527f6c20c1c0f3457d7add7563caa2aae5249d07","modified":1686892414338},{"_id":"public/archives/2023/index.html","hash":"e0a8f52aa3a22119c4ffef8031b65e74f3ce7712","modified":1686892414338},{"_id":"public/archives/2023/03/index.html","hash":"3a232d4a242bfc54ca90684ee1a372011f689b66","modified":1686892414338},{"_id":"public/index.html","hash":"c91ef29643668e1d881f6d1590360760f768a3d6","modified":1686892414338},{"_id":"public/archives/2023/04/index.html","hash":"9451c540d40a9d7ec9fdb40adfc844357af7eec4","modified":1686892414338},{"_id":"public/archives/2023/06/index.html","hash":"48750f0818174f377baa936f24616000a87f9d1f","modified":1686892414338},{"_id":"public/tags/node-js/index.html","hash":"55177db08de8f7e95c4b3fc9622e40e5efbfbfa1","modified":1686892414338},{"_id":"public/tags/sunspot/index.html","hash":"797373ebd0c5c6097cde9433d021b5da645c757a","modified":1686892414338},{"_id":"public/tags/hexo/index.html","hash":"615483c562cec9eb14f95560f2e43d9959296333","modified":1686892414338},{"_id":"public/tags/算法/index.html","hash":"d7a0d92ca1e0701f781b4672071bc13002663119","modified":1686892414338},{"_id":"public/tags/C/index.html","hash":"32b6ee13cc0fe54d30f19fa97a89c777ffc97b40","modified":1686892414338},{"_id":"public/images/output77.png","hash":"e0c9d43942854ccf4679cce904e3fa86beab7652","modified":1686892414338},{"_id":"public/images/sheep.jpg","hash":"ada947bf0ec134b09c55db753b9dd842411ae7ff","modified":1686892414338},{"_id":"public/images/调试.png","hash":"633b89f3a0abec634ebea8dfd4cd5a0c2495e6ba","modified":1686892414338},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1686892414338},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1686892414338},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1686892414338},{"_id":"public/images/胡说八道.png","hash":"5c1abef8048329aa959f530700f2530fcf762496","modified":1686892414338},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1686892414338},{"_id":"public/js/utils.js","hash":"85bae4adcec638fa3ef1e734414025c6b2c90f3c","modified":1686892414338},{"_id":"public/js/search/algolia.js","hash":"5f4294337c28324e088908ed0ceb237a2a360ae5","modified":1686892414338},{"_id":"public/js/search/local-search.js","hash":"5f2ddfd705a85c6a6d327ffcb51d530d8f167e52","modified":1686892414338},{"_id":"public/js/main.js","hash":"05c825962e365af62096d3f1b4d7c9ee1b5fc2f5","modified":1686892414338},{"_id":"public/js/tw_cn.js","hash":"76d0c5c172cae44b34b0bd3125fd068b2c3cbd4a","modified":1686892414338},{"_id":"public/css/index.css","hash":"b70ce73fee4022650ff0c4e2ee4ce1e8a883a979","modified":1686892414338}],"Category":[{"name":"学习笔记","_id":"cliy46tvd0007hgu1czocdm68"}],"Data":[{"_id":"link","data":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}],"Page":[{"title":"tags","date":"2023-03-22T15:20:32.000Z","type":"tags","orderby":"random","order":1,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2023-03-22 23:20:32\ntype: \"tags\"\norderby: random\norder: 1\n---\n","updated":"2023-03-22T15:21:50.865Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cliy46tv20000hgu12r5e5ptj","content":"","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":false,"excerpt":"","more":""},{"title":"categories","date":"2023-03-22T15:22:09.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2023-03-22 23:22:09\ntype: \"categories\"\n---\n","updated":"2023-03-22T15:22:35.420Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cliy46tv80002hgu14jcs7a7a","content":"","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":false,"excerpt":"","more":""},{"title":"link","date":"2023-03-22T15:22:47.000Z","type":"link","_content":"","source":"link/index.md","raw":"---\ntitle: link\ndate: 2023-03-22 23:22:47\ntype: \"link\"\n---\n","updated":"2023-05-25T13:42:11.949Z","path":"link/index.html","comments":1,"layout":"page","_id":"cliy46tvc0005hgu16wkk0198","content":"","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":false,"excerpt":"","more":""}],"Post":[{"title":"test","abbrlink":"d87f7e0c","date":"2023-03-21T16:01:59.000Z","_content":"","source":"_posts/test.md","raw":"---\ntitle: test\nabbrlink: d87f7e0c\ndate: 2023-03-22 00:01:59\ntags: sunspot\n---\n","slug":"test","published":1,"updated":"2023-05-25T13:31:11.599Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cliy46tv50001hgu12dwk1qhu","content":"","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":false,"excerpt":"","more":""},{"title":"Hello World","abbrlink":"4a17b156","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n```bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n```bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n```bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n```bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ncategories: 学习笔记\ntags: [node.js, hexo]\nabbrlink: 4a17b156\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n```bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n```bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n```bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n```bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2023-03-21T15:56:46.871Z","updated":"2023-04-15T15:25:40.244Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cliy46tv90003hgu117vg9ese","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":false,"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"abbrlink":"0","title":"汇编语言","date":"2023-04-21T09:23:00.000Z","updated":"2023-05-10T16:00:00.000Z","mathjax":true,"_content":"在写作业的时候发现的一个问题，$\\text{AL}$等这些寄存器不能乱用，有一些隐含的错误很难发现，需要调试汇编代码。作业填写完成后的代码如下。（本来只是想尝试一下使用DOSBox，顺便验证自己的答案对不对，结果第一个程序就没跑出想要的结果，哈哈哈哈）\n\n```ASM\nCODE SEGMENT\n            ASSUME CS:CODE\n      BEGIN:MOV    AL,7AH\n            MOV    DL,AL\n            AND    DL,0F0H\n            MOV    CL,4\n            SHR    DL,CL\n            ADD    DL,30H\n            CMP    DL,'9'\n            JBE    DONE1\n            ADD    DL,07H\n      DONE1:MOV    AH,2\n            INT    21H\n            MOV    DL,AL\n            AND    DL,0FH\n            ADD    DL,30H\n            CMP    DL,'9'\n            JBE    DONE2\n            ADD    DL,07H\n      DONE2:MOV    AH,2\n            INT    21H\n            MOV    AH,4CH\n            INT    21H\nCODE ENDS\n    END BEGIN\n```\n\n乍一看似乎没什么问题，就是将二进制数$\\text{7AH}$转换成ASCII字符输出（所谓的强大的人工智能机器人ChatGPT也是这么说的），但是真正运行后发现输出的却是77，我让ChatGPT解释一下，不出所料，只会胡说八道。附上对话记录。\n\n![img](/images/胡说八道.png \"胡说八道的ChatGPT\")\n\n当然更重要的是思考为什么会有如下输出。\n\n![img](/images/output77.png \"输出77\")\n\n经过调试可以发现，在中断指令执行后，$\\text{AL}$的值发生了变化。（从027A变为了0237）\n\n![img](/images/调试.png \"调试\")\n\n注意到此前输出的字符值恰好是37，于是猜测每次执行中断指令，都要将$\\text{AL}$的值改为输出的字符值。在网上搜索相关资料后发现的确如此。附上链接[百度知道的回答，评论里有链接](https://zhidao.baidu.com/index/?word=%E6%B1%82%E5%8A%A9%EF%BC%81%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80int21h%E8%BE%93%E5%87%BA%E7%9A%84%E6%97%B6%E5%80%99%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E6%94%B9%E5%8F%98al%E5%AF%84%E5%AD%98%E5%99%A8%E7%9A%84%E5%80%BC%EF%BC%9F%EF%BC%9F&from=qb&ad_test=&uid=bd_1502253603_627&step=1)。\n","source":"_posts/汇编语言1.md","raw":"---\nabbrlink: '0'\ntitle: '汇编语言'\ndate: 2023-04-21 17:23:00\nupdated: 2023-05-11\nmathjax: true\n---\n在写作业的时候发现的一个问题，$\\text{AL}$等这些寄存器不能乱用，有一些隐含的错误很难发现，需要调试汇编代码。作业填写完成后的代码如下。（本来只是想尝试一下使用DOSBox，顺便验证自己的答案对不对，结果第一个程序就没跑出想要的结果，哈哈哈哈）\n\n```ASM\nCODE SEGMENT\n            ASSUME CS:CODE\n      BEGIN:MOV    AL,7AH\n            MOV    DL,AL\n            AND    DL,0F0H\n            MOV    CL,4\n            SHR    DL,CL\n            ADD    DL,30H\n            CMP    DL,'9'\n            JBE    DONE1\n            ADD    DL,07H\n      DONE1:MOV    AH,2\n            INT    21H\n            MOV    DL,AL\n            AND    DL,0FH\n            ADD    DL,30H\n            CMP    DL,'9'\n            JBE    DONE2\n            ADD    DL,07H\n      DONE2:MOV    AH,2\n            INT    21H\n            MOV    AH,4CH\n            INT    21H\nCODE ENDS\n    END BEGIN\n```\n\n乍一看似乎没什么问题，就是将二进制数$\\text{7AH}$转换成ASCII字符输出（所谓的强大的人工智能机器人ChatGPT也是这么说的），但是真正运行后发现输出的却是77，我让ChatGPT解释一下，不出所料，只会胡说八道。附上对话记录。\n\n![img](/images/胡说八道.png \"胡说八道的ChatGPT\")\n\n当然更重要的是思考为什么会有如下输出。\n\n![img](/images/output77.png \"输出77\")\n\n经过调试可以发现，在中断指令执行后，$\\text{AL}$的值发生了变化。（从027A变为了0237）\n\n![img](/images/调试.png \"调试\")\n\n注意到此前输出的字符值恰好是37，于是猜测每次执行中断指令，都要将$\\text{AL}$的值改为输出的字符值。在网上搜索相关资料后发现的确如此。附上链接[百度知道的回答，评论里有链接](https://zhidao.baidu.com/index/?word=%E6%B1%82%E5%8A%A9%EF%BC%81%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80int21h%E8%BE%93%E5%87%BA%E7%9A%84%E6%97%B6%E5%80%99%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E6%94%B9%E5%8F%98al%E5%AF%84%E5%AD%98%E5%99%A8%E7%9A%84%E5%80%BC%EF%BC%9F%EF%BC%9F&from=qb&ad_test=&uid=bd_1502253603_627&step=1)。\n","slug":"汇编语言1","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cliy46tvc0006hgu12nv293pq","content":"<p>在写作业的时候发现的一个问题，$\\text{AL}$等这些寄存器不能乱用，有一些隐含的错误很难发现，需要调试汇编代码。作业填写完成后的代码如下。（本来只是想尝试一下使用DOSBox，顺便验证自己的答案对不对，结果第一个程序就没跑出想要的结果，哈哈哈哈）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CODE SEGMENT</span><br><span class=\"line\">            ASSUME CS:CODE</span><br><span class=\"line\">      BEGIN:MOV    AL,7AH</span><br><span class=\"line\">            MOV    DL,AL</span><br><span class=\"line\">            AND    DL,0F0H</span><br><span class=\"line\">            MOV    CL,4</span><br><span class=\"line\">            SHR    DL,CL</span><br><span class=\"line\">            ADD    DL,30H</span><br><span class=\"line\">            CMP    DL,&#x27;9&#x27;</span><br><span class=\"line\">            JBE    DONE1</span><br><span class=\"line\">            ADD    DL,07H</span><br><span class=\"line\">      DONE1:MOV    AH,2</span><br><span class=\"line\">            INT    21H</span><br><span class=\"line\">            MOV    DL,AL</span><br><span class=\"line\">            AND    DL,0FH</span><br><span class=\"line\">            ADD    DL,30H</span><br><span class=\"line\">            CMP    DL,&#x27;9&#x27;</span><br><span class=\"line\">            JBE    DONE2</span><br><span class=\"line\">            ADD    DL,07H</span><br><span class=\"line\">      DONE2:MOV    AH,2</span><br><span class=\"line\">            INT    21H</span><br><span class=\"line\">            MOV    AH,4CH</span><br><span class=\"line\">            INT    21H</span><br><span class=\"line\">CODE ENDS</span><br><span class=\"line\">    END BEGIN</span><br></pre></td></tr></table></figure>\n<p>乍一看似乎没什么问题，就是将二进制数$\\text{7AH}$转换成ASCII字符输出（所谓的强大的人工智能机器人ChatGPT也是这么说的），但是真正运行后发现输出的却是77，我让ChatGPT解释一下，不出所料，只会胡说八道。附上对话记录。</p>\n<p><img src=\"/images/胡说八道.png\" alt=\"img\" title=\"胡说八道的ChatGPT\"></p>\n<p>当然更重要的是思考为什么会有如下输出。</p>\n<p><img src=\"/images/output77.png\" alt=\"img\" title=\"输出77\"></p>\n<p>经过调试可以发现，在中断指令执行后，$\\text{AL}$的值发生了变化。（从027A变为了0237）</p>\n<p><img src=\"/images/调试.png\" alt=\"img\" title=\"调试\"></p>\n<p>注意到此前输出的字符值恰好是37，于是猜测每次执行中断指令，都要将$\\text{AL}$的值改为输出的字符值。在网上搜索相关资料后发现的确如此。附上链接<a href=\"https://zhidao.baidu.com/index/?word=%E6%B1%82%E5%8A%A9%EF%BC%81%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80int21h%E8%BE%93%E5%87%BA%E7%9A%84%E6%97%B6%E5%80%99%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E6%94%B9%E5%8F%98al%E5%AF%84%E5%AD%98%E5%99%A8%E7%9A%84%E5%80%BC%EF%BC%9F%EF%BC%9F&amp;from=qb&amp;ad_test=&amp;uid=bd_1502253603_627&amp;step=1\">百度知道的回答，评论里有链接</a>。</p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":false,"excerpt":"","more":"<p>在写作业的时候发现的一个问题，$\\text{AL}$等这些寄存器不能乱用，有一些隐含的错误很难发现，需要调试汇编代码。作业填写完成后的代码如下。（本来只是想尝试一下使用DOSBox，顺便验证自己的答案对不对，结果第一个程序就没跑出想要的结果，哈哈哈哈）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CODE SEGMENT</span><br><span class=\"line\">            ASSUME CS:CODE</span><br><span class=\"line\">      BEGIN:MOV    AL,7AH</span><br><span class=\"line\">            MOV    DL,AL</span><br><span class=\"line\">            AND    DL,0F0H</span><br><span class=\"line\">            MOV    CL,4</span><br><span class=\"line\">            SHR    DL,CL</span><br><span class=\"line\">            ADD    DL,30H</span><br><span class=\"line\">            CMP    DL,&#x27;9&#x27;</span><br><span class=\"line\">            JBE    DONE1</span><br><span class=\"line\">            ADD    DL,07H</span><br><span class=\"line\">      DONE1:MOV    AH,2</span><br><span class=\"line\">            INT    21H</span><br><span class=\"line\">            MOV    DL,AL</span><br><span class=\"line\">            AND    DL,0FH</span><br><span class=\"line\">            ADD    DL,30H</span><br><span class=\"line\">            CMP    DL,&#x27;9&#x27;</span><br><span class=\"line\">            JBE    DONE2</span><br><span class=\"line\">            ADD    DL,07H</span><br><span class=\"line\">      DONE2:MOV    AH,2</span><br><span class=\"line\">            INT    21H</span><br><span class=\"line\">            MOV    AH,4CH</span><br><span class=\"line\">            INT    21H</span><br><span class=\"line\">CODE ENDS</span><br><span class=\"line\">    END BEGIN</span><br></pre></td></tr></table></figure>\n<p>乍一看似乎没什么问题，就是将二进制数$\\text{7AH}$转换成ASCII字符输出（所谓的强大的人工智能机器人ChatGPT也是这么说的），但是真正运行后发现输出的却是77，我让ChatGPT解释一下，不出所料，只会胡说八道。附上对话记录。</p>\n<p><img src=\"/images/胡说八道.png\" alt=\"img\" title=\"胡说八道的ChatGPT\"></p>\n<p>当然更重要的是思考为什么会有如下输出。</p>\n<p><img src=\"/images/output77.png\" alt=\"img\" title=\"输出77\"></p>\n<p>经过调试可以发现，在中断指令执行后，$\\text{AL}$的值发生了变化。（从027A变为了0237）</p>\n<p><img src=\"/images/调试.png\" alt=\"img\" title=\"调试\"></p>\n<p>注意到此前输出的字符值恰好是37，于是猜测每次执行中断指令，都要将$\\text{AL}$的值改为输出的字符值。在网上搜索相关资料后发现的确如此。附上链接<a href=\"https://zhidao.baidu.com/index/?word=%E6%B1%82%E5%8A%A9%EF%BC%81%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80int21h%E8%BE%93%E5%87%BA%E7%9A%84%E6%97%B6%E5%80%99%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E6%94%B9%E5%8F%98al%E5%AF%84%E5%AD%98%E5%99%A8%E7%9A%84%E5%80%BC%EF%BC%9F%EF%BC%9F&amp;from=qb&amp;ad_test=&amp;uid=bd_1502253603_627&amp;step=1\">百度知道的回答，评论里有链接</a>。</p>\n"},{"abbrlink":"1","title":"排序算法","date":"2023-06-16T05:08:44.902Z","updated":"2023-06-16T05:13:21.186Z","mathjax":true,"_content":"\n1. 冒泡排序（Bubble Sort）：\n   冒泡排序是一种简单的排序算法，它重复地比较相邻的两个元素，并交换顺序不正确的元素，直到整个序列排序完成。算法的核心思想是通过每一轮的比较将最大的元素逐渐\"冒泡\"到最后的位置。冒泡排序的时间复杂度为O(n^2)。\n\n```c\nvoid bubbleSort(int arr[], int size) {\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = 0; j < size - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                // 交换相邻元素的位置\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n}\n```\n\n2. 插入排序（Insertion Sort）：\n   插入排序将数组分为已排序和未排序两部分，每次将未排序的元素插入到已排序部分的正确位置。它的核心思想是通过构建有序序列，不断地将未排序的元素插入到有序序列中。插入排序的时间复杂度为O(n^2)。\n\n```c\nvoid insertionSort(int arr[], int size) {\n    for (int i = 1; i < size; i++) {\n        int key = arr[i];\n        int j = i - 1;\n        while (j >= 0 && arr[j] > key) {\n            arr[j + 1] = arr[j];\n            j--;\n        }\n        arr[j + 1] = key;\n    }\n}\n```\n\n3. 选择排序（Selection Sort）：\n   选择排序每次从未排序的部分选择最小（或最大）的元素，放到已排序部分的末尾。它的核心思想是通过每一轮的选择将最小（或最大）的元素逐渐放置到正确的位置。选择排序的时间复杂度为O(n^2)。\n\n```c\nvoid selectionSort(int arr[], int size) {\n    for (int i = 0; i < size - 1; i++) {\n        int minIndex = i;\n        for (int j = i + 1; j < size; j++) {\n            if (arr[j] < arr[minIndex]) {\n                minIndex = j;\n            }\n        }\n        // 交换当前位置和最小元素的位置\n        int temp = arr[i];\n        arr[i] = arr[minIndex];\n        arr[minIndex] = temp;\n    }\n}\n```\n\n4. 快速排序（Quick Sort）：\n   快速排序是一种高效的排序算法，它选择一个基准元素，将小于基准的元素放在左边，大于基准的元素放在右边，然后对左右两部分递归地\n\n应用相同的过程。快速排序的平均时间复杂度为O(nlogn)，但在最坏情况下可能达到O(n^2)。\n\n```c\nvoid quickSort(int arr[], int low, int high) {\n    if (low < high) {\n        int pivot = partition(arr, low, high);\n        quickSort(arr, low, pivot - 1);\n        quickSort(arr, pivot + 1, high);\n    }\n}\n\nint partition(int arr[], int low, int high) {\n    int pivot = arr[high];\n    int i = low - 1;\n    for (int j = low; j < high; j++) {\n        if (arr[j] <= pivot) {\n            i++;\n            // 交换当前位置和较小元素的位置\n            int temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n        }\n    }\n    // 交换基准元素和较大元素的位置\n    int temp = arr[i + 1];\n    arr[i + 1] = arr[high];\n    arr[high] = temp;\n    return i + 1;\n}\n```\n\n5. 归并排序（Merge Sort）：\n   归并排序是一种稳定的排序算法，它将数组分成两个子数组，分别排序后再将它们合并成一个有序数组。归并排序的时间复杂度为O(nlogn)，但需要额外的空间来存储临时数组。\n\n```c\nvoid merge(int arr[], int low, int mid, int high) {\n    int n1 = mid - low + 1;\n    int n2 = high - mid;\n\n    int left[n1], right[n2];\n\n    for (int i = 0; i < n1; i++)\n        left[i] = arr[low + i];\n    for (int j = 0; j < n2; j++)\n        right[j] = arr[mid + 1 + j];\n\n    int i = 0, j = 0, k = low;\n\n    while (i < n1 && j < n2) {\n        if (left[i] <= right[j]) {\n            arr[k] = left[i];\n            i++;\n        } else {\n            arr[k] = right[j];\n            j++;\n        }\n        k++;\n    }\n\n    while (i < n1) {\n        arr[k] = left[i];\n        i++;\n        k++;\n    }\n\n    while (j < n2) {\n        arr[k] = right[j];\n        j++;\n        k++;\n    }\n}\n\nvoid mergeSort(int arr[], int low, int high) {\n    if (low < high) {\n        int mid = low + (high - low) / 2;\n\n        mergeSort(arr, low, mid);\n        mergeSort(arr, mid + 1, high);\n\n        merge(arr, low, mid, high);\n    }\n}\n```\n\n6. 堆排序（Heap Sort）：\n   堆排序利用二叉堆的性质进行排序，通过构建最大堆或最小堆来实现。它的时间复杂度为O(nlogn)，不需要额外的空间。\n\n```c\nvoid heapify(int arr[], int size, int root) {\n    int largest = root;\n    int left = 2 * root + 1;\n    int right = 2 * root + 2;\n\n\n\n    if (left < size && arr[left] > arr[largest])\n        largest = left;\n\n    if (right < size && arr[right] > arr[largest])\n        largest = right;\n\n    if (largest != root) {\n        int temp = arr[root];\n        arr[root] = arr[largest];\n        arr[largest] = temp;\n\n        heapify(arr, size, largest);\n    }\n}\n\nvoid heapSort(int arr[], int size) {\n    for (int i = size / 2 - 1; i >= 0; i--)\n        heapify(arr, size, i);\n\n    for (int i = size - 1; i >= 0; i--) {\n        int temp = arr[0];\n        arr[0] = arr[i];\n        arr[i] = temp;\n\n        heapify(arr, i, 0);\n    }\n}\n```\n\n这些是对六种常见排序算法的详细介绍以及对应的C语言代码示例。","source":"_posts/排序算法.md","raw":"---\nabbrlink: '1'\ntitle: '排序算法'\ndate: \nupdated: \nmathjax: true\ncategories: 学习笔记\ntags: [算法, C]\n---\n\n1. 冒泡排序（Bubble Sort）：\n   冒泡排序是一种简单的排序算法，它重复地比较相邻的两个元素，并交换顺序不正确的元素，直到整个序列排序完成。算法的核心思想是通过每一轮的比较将最大的元素逐渐\"冒泡\"到最后的位置。冒泡排序的时间复杂度为O(n^2)。\n\n```c\nvoid bubbleSort(int arr[], int size) {\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = 0; j < size - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                // 交换相邻元素的位置\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n}\n```\n\n2. 插入排序（Insertion Sort）：\n   插入排序将数组分为已排序和未排序两部分，每次将未排序的元素插入到已排序部分的正确位置。它的核心思想是通过构建有序序列，不断地将未排序的元素插入到有序序列中。插入排序的时间复杂度为O(n^2)。\n\n```c\nvoid insertionSort(int arr[], int size) {\n    for (int i = 1; i < size; i++) {\n        int key = arr[i];\n        int j = i - 1;\n        while (j >= 0 && arr[j] > key) {\n            arr[j + 1] = arr[j];\n            j--;\n        }\n        arr[j + 1] = key;\n    }\n}\n```\n\n3. 选择排序（Selection Sort）：\n   选择排序每次从未排序的部分选择最小（或最大）的元素，放到已排序部分的末尾。它的核心思想是通过每一轮的选择将最小（或最大）的元素逐渐放置到正确的位置。选择排序的时间复杂度为O(n^2)。\n\n```c\nvoid selectionSort(int arr[], int size) {\n    for (int i = 0; i < size - 1; i++) {\n        int minIndex = i;\n        for (int j = i + 1; j < size; j++) {\n            if (arr[j] < arr[minIndex]) {\n                minIndex = j;\n            }\n        }\n        // 交换当前位置和最小元素的位置\n        int temp = arr[i];\n        arr[i] = arr[minIndex];\n        arr[minIndex] = temp;\n    }\n}\n```\n\n4. 快速排序（Quick Sort）：\n   快速排序是一种高效的排序算法，它选择一个基准元素，将小于基准的元素放在左边，大于基准的元素放在右边，然后对左右两部分递归地\n\n应用相同的过程。快速排序的平均时间复杂度为O(nlogn)，但在最坏情况下可能达到O(n^2)。\n\n```c\nvoid quickSort(int arr[], int low, int high) {\n    if (low < high) {\n        int pivot = partition(arr, low, high);\n        quickSort(arr, low, pivot - 1);\n        quickSort(arr, pivot + 1, high);\n    }\n}\n\nint partition(int arr[], int low, int high) {\n    int pivot = arr[high];\n    int i = low - 1;\n    for (int j = low; j < high; j++) {\n        if (arr[j] <= pivot) {\n            i++;\n            // 交换当前位置和较小元素的位置\n            int temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n        }\n    }\n    // 交换基准元素和较大元素的位置\n    int temp = arr[i + 1];\n    arr[i + 1] = arr[high];\n    arr[high] = temp;\n    return i + 1;\n}\n```\n\n5. 归并排序（Merge Sort）：\n   归并排序是一种稳定的排序算法，它将数组分成两个子数组，分别排序后再将它们合并成一个有序数组。归并排序的时间复杂度为O(nlogn)，但需要额外的空间来存储临时数组。\n\n```c\nvoid merge(int arr[], int low, int mid, int high) {\n    int n1 = mid - low + 1;\n    int n2 = high - mid;\n\n    int left[n1], right[n2];\n\n    for (int i = 0; i < n1; i++)\n        left[i] = arr[low + i];\n    for (int j = 0; j < n2; j++)\n        right[j] = arr[mid + 1 + j];\n\n    int i = 0, j = 0, k = low;\n\n    while (i < n1 && j < n2) {\n        if (left[i] <= right[j]) {\n            arr[k] = left[i];\n            i++;\n        } else {\n            arr[k] = right[j];\n            j++;\n        }\n        k++;\n    }\n\n    while (i < n1) {\n        arr[k] = left[i];\n        i++;\n        k++;\n    }\n\n    while (j < n2) {\n        arr[k] = right[j];\n        j++;\n        k++;\n    }\n}\n\nvoid mergeSort(int arr[], int low, int high) {\n    if (low < high) {\n        int mid = low + (high - low) / 2;\n\n        mergeSort(arr, low, mid);\n        mergeSort(arr, mid + 1, high);\n\n        merge(arr, low, mid, high);\n    }\n}\n```\n\n6. 堆排序（Heap Sort）：\n   堆排序利用二叉堆的性质进行排序，通过构建最大堆或最小堆来实现。它的时间复杂度为O(nlogn)，不需要额外的空间。\n\n```c\nvoid heapify(int arr[], int size, int root) {\n    int largest = root;\n    int left = 2 * root + 1;\n    int right = 2 * root + 2;\n\n\n\n    if (left < size && arr[left] > arr[largest])\n        largest = left;\n\n    if (right < size && arr[right] > arr[largest])\n        largest = right;\n\n    if (largest != root) {\n        int temp = arr[root];\n        arr[root] = arr[largest];\n        arr[largest] = temp;\n\n        heapify(arr, size, largest);\n    }\n}\n\nvoid heapSort(int arr[], int size) {\n    for (int i = size / 2 - 1; i >= 0; i--)\n        heapify(arr, size, i);\n\n    for (int i = size - 1; i >= 0; i--) {\n        int temp = arr[0];\n        arr[0] = arr[i];\n        arr[i] = temp;\n\n        heapify(arr, i, 0);\n    }\n}\n```\n\n这些是对六种常见排序算法的详细介绍以及对应的C语言代码示例。","slug":"排序算法","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cliy46tve0008hgu10ltja7wc","content":"<ol>\n<li>冒泡排序（Bubble Sort）：<br>冒泡排序是一种简单的排序算法，它重复地比较相邻的两个元素，并交换顺序不正确的元素，直到整个序列排序完成。算法的核心思想是通过每一轮的比较将最大的元素逐渐”冒泡”到最后的位置。冒泡排序的时间复杂度为O(n^2)。</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">bubbleSort</span><span class=\"params\">(<span class=\"type\">int</span> arr[], <span class=\"type\">int</span> size)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; size - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; size - i - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 交换相邻元素的位置</span></span><br><span class=\"line\">                <span class=\"type\">int</span> temp = arr[j];</span><br><span class=\"line\">                arr[j] = arr[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">                arr[j + <span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>插入排序（Insertion Sort）：<br>插入排序将数组分为已排序和未排序两部分，每次将未排序的元素插入到已排序部分的正确位置。它的核心思想是通过构建有序序列，不断地将未排序的元素插入到有序序列中。插入排序的时间复杂度为O(n^2)。</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">insertionSort</span><span class=\"params\">(<span class=\"type\">int</span> arr[], <span class=\"type\">int</span> size)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> key = arr[i];</span><br><span class=\"line\">        <span class=\"type\">int</span> j = i - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j &gt;= <span class=\"number\">0</span> &amp;&amp; arr[j] &gt; key) &#123;</span><br><span class=\"line\">            arr[j + <span class=\"number\">1</span>] = arr[j];</span><br><span class=\"line\">            j--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        arr[j + <span class=\"number\">1</span>] = key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>选择排序（Selection Sort）：<br>选择排序每次从未排序的部分选择最小（或最大）的元素，放到已排序部分的末尾。它的核心思想是通过每一轮的选择将最小（或最大）的元素逐渐放置到正确的位置。选择排序的时间复杂度为O(n^2)。</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">selectionSort</span><span class=\"params\">(<span class=\"type\">int</span> arr[], <span class=\"type\">int</span> size)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; size - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> minIndex = i;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i + <span class=\"number\">1</span>; j &lt; size; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j] &lt; arr[minIndex]) &#123;</span><br><span class=\"line\">                minIndex = j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 交换当前位置和最小元素的位置</span></span><br><span class=\"line\">        <span class=\"type\">int</span> temp = arr[i];</span><br><span class=\"line\">        arr[i] = arr[minIndex];</span><br><span class=\"line\">        arr[minIndex] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>快速排序（Quick Sort）：<br>快速排序是一种高效的排序算法，它选择一个基准元素，将小于基准的元素放在左边，大于基准的元素放在右边，然后对左右两部分递归地</li>\n</ol>\n<p>应用相同的过程。快速排序的平均时间复杂度为O(nlogn)，但在最坏情况下可能达到O(n^2)。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">quickSort</span><span class=\"params\">(<span class=\"type\">int</span> arr[], <span class=\"type\">int</span> low, <span class=\"type\">int</span> high)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (low &lt; high) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> pivot = partition(arr, low, high);</span><br><span class=\"line\">        quickSort(arr, low, pivot - <span class=\"number\">1</span>);</span><br><span class=\"line\">        quickSort(arr, pivot + <span class=\"number\">1</span>, high);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">partition</span><span class=\"params\">(<span class=\"type\">int</span> arr[], <span class=\"type\">int</span> low, <span class=\"type\">int</span> high)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> pivot = arr[high];</span><br><span class=\"line\">    <span class=\"type\">int</span> i = low - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = low; j &lt; high; j++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[j] &lt;= pivot) &#123;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">            <span class=\"comment\">// 交换当前位置和较小元素的位置</span></span><br><span class=\"line\">            <span class=\"type\">int</span> temp = arr[i];</span><br><span class=\"line\">            arr[i] = arr[j];</span><br><span class=\"line\">            arr[j] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 交换基准元素和较大元素的位置</span></span><br><span class=\"line\">    <span class=\"type\">int</span> temp = arr[i + <span class=\"number\">1</span>];</span><br><span class=\"line\">    arr[i + <span class=\"number\">1</span>] = arr[high];</span><br><span class=\"line\">    arr[high] = temp;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>归并排序（Merge Sort）：<br>归并排序是一种稳定的排序算法，它将数组分成两个子数组，分别排序后再将它们合并成一个有序数组。归并排序的时间复杂度为O(nlogn)，但需要额外的空间来存储临时数组。</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">merge</span><span class=\"params\">(<span class=\"type\">int</span> arr[], <span class=\"type\">int</span> low, <span class=\"type\">int</span> mid, <span class=\"type\">int</span> high)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n1 = mid - low + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> n2 = high - mid;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> left[n1], right[n2];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n1; i++)</span><br><span class=\"line\">        left[i] = arr[low + i];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n2; j++)</span><br><span class=\"line\">        right[j] = arr[mid + <span class=\"number\">1</span> + j];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>, k = low;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; n1 &amp;&amp; j &lt; n2) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left[i] &lt;= right[j]) &#123;</span><br><span class=\"line\">            arr[k] = left[i];</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            arr[k] = right[j];</span><br><span class=\"line\">            j++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        k++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; n1) &#123;</span><br><span class=\"line\">        arr[k] = left[i];</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">        k++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (j &lt; n2) &#123;</span><br><span class=\"line\">        arr[k] = right[j];</span><br><span class=\"line\">        j++;</span><br><span class=\"line\">        k++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">mergeSort</span><span class=\"params\">(<span class=\"type\">int</span> arr[], <span class=\"type\">int</span> low, <span class=\"type\">int</span> high)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (low &lt; high) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> mid = low + (high - low) / <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        mergeSort(arr, low, mid);</span><br><span class=\"line\">        mergeSort(arr, mid + <span class=\"number\">1</span>, high);</span><br><span class=\"line\"></span><br><span class=\"line\">        merge(arr, low, mid, high);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>堆排序（Heap Sort）：<br>堆排序利用二叉堆的性质进行排序，通过构建最大堆或最小堆来实现。它的时间复杂度为O(nlogn)，不需要额外的空间。</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">heapify</span><span class=\"params\">(<span class=\"type\">int</span> arr[], <span class=\"type\">int</span> size, <span class=\"type\">int</span> root)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> largest = root;</span><br><span class=\"line\">    <span class=\"type\">int</span> left = <span class=\"number\">2</span> * root + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> right = <span class=\"number\">2</span> * root + <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (left &lt; size &amp;&amp; arr[left] &gt; arr[largest])</span><br><span class=\"line\">        largest = left;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (right &lt; size &amp;&amp; arr[right] &gt; arr[largest])</span><br><span class=\"line\">        largest = right;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (largest != root) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> temp = arr[root];</span><br><span class=\"line\">        arr[root] = arr[largest];</span><br><span class=\"line\">        arr[largest] = temp;</span><br><span class=\"line\"></span><br><span class=\"line\">        heapify(arr, size, largest);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">heapSort</span><span class=\"params\">(<span class=\"type\">int</span> arr[], <span class=\"type\">int</span> size)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = size / <span class=\"number\">2</span> - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)</span><br><span class=\"line\">        heapify(arr, size, i);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = size - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> temp = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">        arr[<span class=\"number\">0</span>] = arr[i];</span><br><span class=\"line\">        arr[i] = temp;</span><br><span class=\"line\"></span><br><span class=\"line\">        heapify(arr, i, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这些是对六种常见排序算法的详细介绍以及对应的C语言代码示例。</p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":false,"excerpt":"","more":"<ol>\n<li>冒泡排序（Bubble Sort）：<br>冒泡排序是一种简单的排序算法，它重复地比较相邻的两个元素，并交换顺序不正确的元素，直到整个序列排序完成。算法的核心思想是通过每一轮的比较将最大的元素逐渐”冒泡”到最后的位置。冒泡排序的时间复杂度为O(n^2)。</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">bubbleSort</span><span class=\"params\">(<span class=\"type\">int</span> arr[], <span class=\"type\">int</span> size)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; size - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; size - i - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 交换相邻元素的位置</span></span><br><span class=\"line\">                <span class=\"type\">int</span> temp = arr[j];</span><br><span class=\"line\">                arr[j] = arr[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">                arr[j + <span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>插入排序（Insertion Sort）：<br>插入排序将数组分为已排序和未排序两部分，每次将未排序的元素插入到已排序部分的正确位置。它的核心思想是通过构建有序序列，不断地将未排序的元素插入到有序序列中。插入排序的时间复杂度为O(n^2)。</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">insertionSort</span><span class=\"params\">(<span class=\"type\">int</span> arr[], <span class=\"type\">int</span> size)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> key = arr[i];</span><br><span class=\"line\">        <span class=\"type\">int</span> j = i - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j &gt;= <span class=\"number\">0</span> &amp;&amp; arr[j] &gt; key) &#123;</span><br><span class=\"line\">            arr[j + <span class=\"number\">1</span>] = arr[j];</span><br><span class=\"line\">            j--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        arr[j + <span class=\"number\">1</span>] = key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>选择排序（Selection Sort）：<br>选择排序每次从未排序的部分选择最小（或最大）的元素，放到已排序部分的末尾。它的核心思想是通过每一轮的选择将最小（或最大）的元素逐渐放置到正确的位置。选择排序的时间复杂度为O(n^2)。</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">selectionSort</span><span class=\"params\">(<span class=\"type\">int</span> arr[], <span class=\"type\">int</span> size)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; size - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> minIndex = i;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i + <span class=\"number\">1</span>; j &lt; size; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j] &lt; arr[minIndex]) &#123;</span><br><span class=\"line\">                minIndex = j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 交换当前位置和最小元素的位置</span></span><br><span class=\"line\">        <span class=\"type\">int</span> temp = arr[i];</span><br><span class=\"line\">        arr[i] = arr[minIndex];</span><br><span class=\"line\">        arr[minIndex] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>快速排序（Quick Sort）：<br>快速排序是一种高效的排序算法，它选择一个基准元素，将小于基准的元素放在左边，大于基准的元素放在右边，然后对左右两部分递归地</li>\n</ol>\n<p>应用相同的过程。快速排序的平均时间复杂度为O(nlogn)，但在最坏情况下可能达到O(n^2)。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">quickSort</span><span class=\"params\">(<span class=\"type\">int</span> arr[], <span class=\"type\">int</span> low, <span class=\"type\">int</span> high)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (low &lt; high) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> pivot = partition(arr, low, high);</span><br><span class=\"line\">        quickSort(arr, low, pivot - <span class=\"number\">1</span>);</span><br><span class=\"line\">        quickSort(arr, pivot + <span class=\"number\">1</span>, high);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">partition</span><span class=\"params\">(<span class=\"type\">int</span> arr[], <span class=\"type\">int</span> low, <span class=\"type\">int</span> high)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> pivot = arr[high];</span><br><span class=\"line\">    <span class=\"type\">int</span> i = low - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = low; j &lt; high; j++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[j] &lt;= pivot) &#123;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">            <span class=\"comment\">// 交换当前位置和较小元素的位置</span></span><br><span class=\"line\">            <span class=\"type\">int</span> temp = arr[i];</span><br><span class=\"line\">            arr[i] = arr[j];</span><br><span class=\"line\">            arr[j] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 交换基准元素和较大元素的位置</span></span><br><span class=\"line\">    <span class=\"type\">int</span> temp = arr[i + <span class=\"number\">1</span>];</span><br><span class=\"line\">    arr[i + <span class=\"number\">1</span>] = arr[high];</span><br><span class=\"line\">    arr[high] = temp;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>归并排序（Merge Sort）：<br>归并排序是一种稳定的排序算法，它将数组分成两个子数组，分别排序后再将它们合并成一个有序数组。归并排序的时间复杂度为O(nlogn)，但需要额外的空间来存储临时数组。</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">merge</span><span class=\"params\">(<span class=\"type\">int</span> arr[], <span class=\"type\">int</span> low, <span class=\"type\">int</span> mid, <span class=\"type\">int</span> high)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n1 = mid - low + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> n2 = high - mid;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> left[n1], right[n2];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n1; i++)</span><br><span class=\"line\">        left[i] = arr[low + i];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n2; j++)</span><br><span class=\"line\">        right[j] = arr[mid + <span class=\"number\">1</span> + j];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>, k = low;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; n1 &amp;&amp; j &lt; n2) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left[i] &lt;= right[j]) &#123;</span><br><span class=\"line\">            arr[k] = left[i];</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            arr[k] = right[j];</span><br><span class=\"line\">            j++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        k++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; n1) &#123;</span><br><span class=\"line\">        arr[k] = left[i];</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">        k++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (j &lt; n2) &#123;</span><br><span class=\"line\">        arr[k] = right[j];</span><br><span class=\"line\">        j++;</span><br><span class=\"line\">        k++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">mergeSort</span><span class=\"params\">(<span class=\"type\">int</span> arr[], <span class=\"type\">int</span> low, <span class=\"type\">int</span> high)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (low &lt; high) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> mid = low + (high - low) / <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        mergeSort(arr, low, mid);</span><br><span class=\"line\">        mergeSort(arr, mid + <span class=\"number\">1</span>, high);</span><br><span class=\"line\"></span><br><span class=\"line\">        merge(arr, low, mid, high);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>堆排序（Heap Sort）：<br>堆排序利用二叉堆的性质进行排序，通过构建最大堆或最小堆来实现。它的时间复杂度为O(nlogn)，不需要额外的空间。</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">heapify</span><span class=\"params\">(<span class=\"type\">int</span> arr[], <span class=\"type\">int</span> size, <span class=\"type\">int</span> root)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> largest = root;</span><br><span class=\"line\">    <span class=\"type\">int</span> left = <span class=\"number\">2</span> * root + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> right = <span class=\"number\">2</span> * root + <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (left &lt; size &amp;&amp; arr[left] &gt; arr[largest])</span><br><span class=\"line\">        largest = left;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (right &lt; size &amp;&amp; arr[right] &gt; arr[largest])</span><br><span class=\"line\">        largest = right;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (largest != root) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> temp = arr[root];</span><br><span class=\"line\">        arr[root] = arr[largest];</span><br><span class=\"line\">        arr[largest] = temp;</span><br><span class=\"line\"></span><br><span class=\"line\">        heapify(arr, size, largest);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">heapSort</span><span class=\"params\">(<span class=\"type\">int</span> arr[], <span class=\"type\">int</span> size)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = size / <span class=\"number\">2</span> - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)</span><br><span class=\"line\">        heapify(arr, size, i);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = size - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> temp = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">        arr[<span class=\"number\">0</span>] = arr[i];</span><br><span class=\"line\">        arr[i] = temp;</span><br><span class=\"line\"></span><br><span class=\"line\">        heapify(arr, i, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这些是对六种常见排序算法的详细介绍以及对应的C语言代码示例。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cliy46tv90003hgu117vg9ese","category_id":"cliy46tvd0007hgu1czocdm68","_id":"cliy46tvh000dhgu1et0re5rj"},{"post_id":"cliy46tve0008hgu10ltja7wc","category_id":"cliy46tvd0007hgu1czocdm68","_id":"cliy46tvh000fhgu13t9leyxf"}],"PostTag":[{"post_id":"cliy46tv50001hgu12dwk1qhu","tag_id":"cliy46tvb0004hgu109nz0hsr","_id":"cliy46tvf000ahgu171u281lt"},{"post_id":"cliy46tv90003hgu117vg9ese","tag_id":"cliy46tvf0009hgu122o05oqj","_id":"cliy46tvh000ghgu17bo740h6"},{"post_id":"cliy46tv90003hgu117vg9ese","tag_id":"cliy46tvg000chgu189anaxv4","_id":"cliy46tvh000hhgu19ybebnzc"},{"post_id":"cliy46tve0008hgu10ltja7wc","tag_id":"cliy46tvh000ehgu16znz900o","_id":"cliy46tvh000jhgu16ez2cd8t"},{"post_id":"cliy46tve0008hgu10ltja7wc","tag_id":"cliy46tvh000ihgu165kz25zm","_id":"cliy46tvh000khgu1di029nky"}],"Tag":[{"name":"sunspot","_id":"cliy46tvb0004hgu109nz0hsr"},{"name":"node.js","_id":"cliy46tvf0009hgu122o05oqj"},{"name":"hexo","_id":"cliy46tvg000chgu189anaxv4"},{"name":"算法","_id":"cliy46tvh000ehgu16znz900o"},{"name":"C","_id":"cliy46tvh000ihgu165kz25zm"}]}}