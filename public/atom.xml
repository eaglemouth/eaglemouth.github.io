<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Eagle</title>
  
  <subtitle>Website of Eaglemouth</subtitle>
  <link href="https://eaglemouth.eu.org/atom.xml" rel="self"/>
  
  <link href="https://eaglemouth.eu.org/"/>
  <updated>2023-06-16T05:13:21.186Z</updated>
  <id>https://eaglemouth.eu.org/</id>
  
  <author>
    <name>Eaglemouth</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>排序算法</title>
    <link href="https://eaglemouth.eu.org/posts/1.html"/>
    <id>https://eaglemouth.eu.org/posts/1.html</id>
    <published>2023-06-16T05:08:44.902Z</published>
    <updated>2023-06-16T05:13:21.186Z</updated>
    
    <content type="html"><![CDATA[<ol><li>冒泡排序（Bubble Sort）：<br>冒泡排序是一种简单的排序算法，它重复地比较相邻的两个元素，并交换顺序不正确的元素，直到整个序列排序完成。算法的核心思想是通过每一轮的比较将最大的元素逐渐”冒泡”到最后的位置。冒泡排序的时间复杂度为O(n^2)。</li></ol><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">bubbleSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> size)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; size - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="comment">// 交换相邻元素的位置</span></span><br><span class="line">                <span class="type">int</span> temp = arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>插入排序（Insertion Sort）：<br>插入排序将数组分为已排序和未排序两部分，每次将未排序的元素插入到已排序部分的正确位置。它的核心思想是通过构建有序序列，不断地将未排序的元素插入到有序序列中。插入排序的时间复杂度为O(n^2)。</li></ol><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">insertionSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> size)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; size; i++) &#123;</span><br><span class="line">        <span class="type">int</span> key = arr[i];</span><br><span class="line">        <span class="type">int</span> j = i - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; key) &#123;</span><br><span class="line">            arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[j + <span class="number">1</span>] = key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>选择排序（Selection Sort）：<br>选择排序每次从未排序的部分选择最小（或最大）的元素，放到已排序部分的末尾。它的核心思想是通过每一轮的选择将最小（或最大）的元素逐渐放置到正确的位置。选择排序的时间复杂度为O(n^2)。</li></ol><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">selectionSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> size)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="type">int</span> minIndex = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; size; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &lt; arr[minIndex]) &#123;</span><br><span class="line">                minIndex = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 交换当前位置和最小元素的位置</span></span><br><span class="line">        <span class="type">int</span> temp = arr[i];</span><br><span class="line">        arr[i] = arr[minIndex];</span><br><span class="line">        arr[minIndex] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>快速排序（Quick Sort）：<br>快速排序是一种高效的排序算法，它选择一个基准元素，将小于基准的元素放在左边，大于基准的元素放在右边，然后对左右两部分递归地</li></ol><p>应用相同的过程。快速排序的平均时间复杂度为O(nlogn)，但在最坏情况下可能达到O(n^2)。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> low, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (low &lt; high) &#123;</span><br><span class="line">        <span class="type">int</span> pivot = partition(arr, low, high);</span><br><span class="line">        quickSort(arr, low, pivot - <span class="number">1</span>);</span><br><span class="line">        quickSort(arr, pivot + <span class="number">1</span>, high);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">partition</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> low, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">    <span class="type">int</span> pivot = arr[high];</span><br><span class="line">    <span class="type">int</span> i = low - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = low; j &lt; high; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[j] &lt;= pivot) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="comment">// 交换当前位置和较小元素的位置</span></span><br><span class="line">            <span class="type">int</span> temp = arr[i];</span><br><span class="line">            arr[i] = arr[j];</span><br><span class="line">            arr[j] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 交换基准元素和较大元素的位置</span></span><br><span class="line">    <span class="type">int</span> temp = arr[i + <span class="number">1</span>];</span><br><span class="line">    arr[i + <span class="number">1</span>] = arr[high];</span><br><span class="line">    arr[high] = temp;</span><br><span class="line">    <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>归并排序（Merge Sort）：<br>归并排序是一种稳定的排序算法，它将数组分成两个子数组，分别排序后再将它们合并成一个有序数组。归并排序的时间复杂度为O(nlogn)，但需要额外的空间来存储临时数组。</li></ol><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> low, <span class="type">int</span> mid, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n1 = mid - low + <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> n2 = high - mid;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> left[n1], right[n2];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n1; i++)</span><br><span class="line">        left[i] = arr[low + i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n2; j++)</span><br><span class="line">        right[j] = arr[mid + <span class="number">1</span> + j];</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k = low;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt; n1 &amp;&amp; j &lt; n2) &#123;</span><br><span class="line">        <span class="keyword">if</span> (left[i] &lt;= right[j]) &#123;</span><br><span class="line">            arr[k] = left[i];</span><br><span class="line">            i++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            arr[k] = right[j];</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt; n1) &#123;</span><br><span class="line">        arr[k] = left[i];</span><br><span class="line">        i++;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (j &lt; n2) &#123;</span><br><span class="line">        arr[k] = right[j];</span><br><span class="line">        j++;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">mergeSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> low, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (low &lt; high) &#123;</span><br><span class="line">        <span class="type">int</span> mid = low + (high - low) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        mergeSort(arr, low, mid);</span><br><span class="line">        mergeSort(arr, mid + <span class="number">1</span>, high);</span><br><span class="line"></span><br><span class="line">        merge(arr, low, mid, high);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>堆排序（Heap Sort）：<br>堆排序利用二叉堆的性质进行排序，通过构建最大堆或最小堆来实现。它的时间复杂度为O(nlogn)，不需要额外的空间。</li></ol><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">heapify</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> size, <span class="type">int</span> root)</span> &#123;</span><br><span class="line">    <span class="type">int</span> largest = root;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">2</span> * root + <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> right = <span class="number">2</span> * root + <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (left &lt; size &amp;&amp; arr[left] &gt; arr[largest])</span><br><span class="line">        largest = left;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (right &lt; size &amp;&amp; arr[right] &gt; arr[largest])</span><br><span class="line">        largest = right;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (largest != root) &#123;</span><br><span class="line">        <span class="type">int</span> temp = arr[root];</span><br><span class="line">        arr[root] = arr[largest];</span><br><span class="line">        arr[largest] = temp;</span><br><span class="line"></span><br><span class="line">        heapify(arr, size, largest);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">heapSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> size)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = size / <span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        heapify(arr, size, i);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = size - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="type">int</span> temp = arr[<span class="number">0</span>];</span><br><span class="line">        arr[<span class="number">0</span>] = arr[i];</span><br><span class="line">        arr[i] = temp;</span><br><span class="line"></span><br><span class="line">        heapify(arr, i, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这些是对六种常见排序算法的详细介绍以及对应的C语言代码示例。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;冒泡排序（Bubble Sort）：&lt;br&gt;冒泡排序是一种简单的排序算法，它重复地比较相邻的两个元素，并交换顺序不正确的元素，直到整个序列排序完成。算法的核心思想是通过每一轮的比较将最大的元素逐渐”冒泡”到最后的位置。冒泡排序的时间复杂度为O(n^2)。&lt;/li</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://eaglemouth.eu.org/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="算法" scheme="https://eaglemouth.eu.org/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="C" scheme="https://eaglemouth.eu.org/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>汇编语言</title>
    <link href="https://eaglemouth.eu.org/posts/0.html"/>
    <id>https://eaglemouth.eu.org/posts/0.html</id>
    <published>2023-04-21T09:23:00.000Z</published>
    <updated>2023-05-10T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在写作业的时候发现的一个问题，$\text{AL}$等这些寄存器不能乱用，有一些隐含的错误很难发现，需要调试汇编代码。作业填写完成后的代码如下。（本来只是想尝试一下使用DOSBox，顺便验证自己的答案对不对，结果第一个程序就没跑出想要的结果，哈哈哈哈）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CODE SEGMENT</span><br><span class="line">            ASSUME CS:CODE</span><br><span class="line">      BEGIN:MOV    AL,7AH</span><br><span class="line">            MOV    DL,AL</span><br><span class="line">            AND    DL,0F0H</span><br><span class="line">            MOV    CL,4</span><br><span class="line">            SHR    DL,CL</span><br><span class="line">            ADD    DL,30H</span><br><span class="line">            CMP    DL,&#x27;9&#x27;</span><br><span class="line">            JBE    DONE1</span><br><span class="line">            ADD    DL,07H</span><br><span class="line">      DONE1:MOV    AH,2</span><br><span class="line">            INT    21H</span><br><span class="line">            MOV    DL,AL</span><br><span class="line">            AND    DL,0FH</span><br><span class="line">            ADD    DL,30H</span><br><span class="line">            CMP    DL,&#x27;9&#x27;</span><br><span class="line">            JBE    DONE2</span><br><span class="line">            ADD    DL,07H</span><br><span class="line">      DONE2:MOV    AH,2</span><br><span class="line">            INT    21H</span><br><span class="line">            MOV    AH,4CH</span><br><span class="line">            INT    21H</span><br><span class="line">CODE ENDS</span><br><span class="line">    END BEGIN</span><br></pre></td></tr></table></figure><p>乍一看似乎没什么问题，就是将二进制数$\text{7AH}$转换成ASCII字符输出（所谓的强大的人工智能机器人ChatGPT也是这么说的），但是真正运行后发现输出的却是77，我让ChatGPT解释一下，不出所料，只会胡说八道。附上对话记录。</p><p><img src="/images/胡说八道.png" alt="img" title="胡说八道的ChatGPT"></p><p>当然更重要的是思考为什么会有如下输出。</p><p><img src="/images/output77.png" alt="img" title="输出77"></p><p>经过调试可以发现，在中断指令执行后，$\text{AL}$的值发生了变化。（从027A变为了0237）</p><p><img src="/images/调试.png" alt="img" title="调试"></p><p>注意到此前输出的字符值恰好是37，于是猜测每次执行中断指令，都要将$\text{AL}$的值改为输出的字符值。在网上搜索相关资料后发现的确如此。附上链接<a href="https://zhidao.baidu.com/index/?word=%E6%B1%82%E5%8A%A9%EF%BC%81%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80int21h%E8%BE%93%E5%87%BA%E7%9A%84%E6%97%B6%E5%80%99%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E6%94%B9%E5%8F%98al%E5%AF%84%E5%AD%98%E5%99%A8%E7%9A%84%E5%80%BC%EF%BC%9F%EF%BC%9F&amp;from=qb&amp;ad_test=&amp;uid=bd_1502253603_627&amp;step=1">百度知道的回答，评论里有链接</a>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在写作业的时候发现的一个问题，$&#92;text{AL}$等这些寄存器不能乱用，有一些隐含的错误很难发现，需要调试汇编代码。作业填写完成后的代码如下。（本来只是想尝试一下使用DOSBox，顺便验证自己的答案对不对，结果第一个程序就没跑出想要的结果，哈哈哈哈）&lt;/p&gt;
&lt;figur</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="https://eaglemouth.eu.org/posts/d87f7e0c.html"/>
    <id>https://eaglemouth.eu.org/posts/d87f7e0c.html</id>
    <published>2023-03-21T16:01:59.000Z</published>
    <updated>2023-05-25T13:31:11.599Z</updated>
    
    
    
    
    
    <category term="sunspot" scheme="https://eaglemouth.eu.org/tags/sunspot/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://eaglemouth.eu.org/posts/4a17b156.html"/>
    <id>https://eaglemouth.eu.org/posts/4a17b156.html</id>
    <published>2023-03-21T15:56:46.871Z</published>
    <updated>2023-04-15T15:25:40.244Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://eaglemouth.eu.org/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="node.js" scheme="https://eaglemouth.eu.org/tags/node-js/"/>
    
    <category term="hexo" scheme="https://eaglemouth.eu.org/tags/hexo/"/>
    
  </entry>
  
</feed>
